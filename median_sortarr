class Solution:
    def findMedianSortedArrays(self, nums1: List[int], nums2: List[int]) -> float:
        if len(nums1) > len(nums2):
            nums1, nums2 = nums2, nums1
        m, n = len(nums1), len(nums2)
        left, right = 0, m
        while left <= right:
            i = (left + right) // 2
            j = (m + n + 1) // 2 - i
            max_left_A = float('-inf') if i == 0 else nums1[i - 1]
            min_right_A = float('inf') if i == m else nums1[i]
            max_left_B = float('-inf') if j == 0 else nums2[j - 1]
            min_right_B = float('inf') if j == n else nums2[j]
            if max_left_A <= min_right_B and max_left_B <= min_right_A:
                if (m + n) % 2 == 0:
                    return (max(max_left_A, max_left_B) + min(min_right_A, min_right_B)) / 2.0
                else:
                    return float(max(max_left_A, max_left_B))
            elif max_left_A > min_right_B:
                right = i - 1
            else:
                left = i + 1
